-- Create schema
CREATE SCHEMA IF NOT EXISTS spaced_learning;

-- Switch to spaced_learning schema
SET search_path TO spaced_learning;

-- Books table
CREATE TABLE IF NOT EXISTS spaced_learning.books (
    id uuid NOT NULL,
    name varchar(100) NOT NULL,
    status varchar(20) NULL DEFAULT 'DRAFT',
    difficulty_level varchar(20) NULL,
    category varchar(50) NULL,
    description text NULL,
    book_no integer NULL DEFAULT 0,
    created_at timestamp(6) NULL,
    updated_at timestamp(6) NULL,
    deleted_at timestamp(6) NULL,
    CONSTRAINT books_pkey PRIMARY KEY (id),
    CONSTRAINT books_status_check CHECK (((status)::text = ANY ((ARRAY['PUBLISHED'::character varying, 'DRAFT'::character varying, 'ARCHIVED'::character varying])::text[]))),
    CONSTRAINT books_difficulty_level_check CHECK (((difficulty_level)::text = ANY ((ARRAY['BEGINNER'::character varying, 'INTERMEDIATE'::character varying, 'ADVANCED'::character varying, 'EXPERT'::character varying])::text[])))
);

-- Roles table
CREATE TABLE IF NOT EXISTS spaced_learning.roles (
    id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
    name varchar(50) NOT NULL,
    description varchar(255) NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT ukofx66keruapi6vyqpv6f2or37 UNIQUE (name)
);

-- Insert default roles
INSERT INTO spaced_learning.roles (name, description)
VALUES ('ROLE_USER', 'Regular user role')
ON CONFLICT (name) DO NOTHING;

INSERT INTO spaced_learning.roles (name, description)
VALUES ('ROLE_ADMIN', 'Administrator role')
ON CONFLICT (name) DO NOTHING;

-- Users table
CREATE TABLE IF NOT EXISTS spaced_learning.users (
    id uuid NOT NULL,
    username varchar(50) NOT NULL,
    email varchar(100) NOT NULL,
    password varchar(120) NOT NULL,
    name varchar(100) NOT NULL,
    status varchar(20) NULL DEFAULT 'ACTIVE',
    last_active_date timestamp(6) NULL,
    created_at timestamp(6) NULL,
    updated_at timestamp(6) NULL,
    deleted_at timestamp(6) NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT uk6dotkott2kjsp8vw4d0m25fb7 UNIQUE (email),
    CONSTRAINT uk_r43af9ap4edm43mmtq01oddj6 UNIQUE (username),
    CONSTRAINT users_status_check CHECK (((status)::text = ANY ((ARRAY['ACTIVE'::character varying, 'INACTIVE'::character varying, 'SUSPENDED'::character varying])::text[])))
);

-- User roles (junction table)
CREATE TABLE IF NOT EXISTS spaced_learning.user_roles (
    user_id uuid NOT NULL,
    role_id int8 NOT NULL,
    CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id)
);

-- Modules table
CREATE TABLE IF NOT EXISTS spaced_learning.modules (
    id uuid NOT NULL,
    book_id uuid NOT NULL,
    module_no int4 NOT NULL,
    title varchar(255) NOT NULL,
    word_count int4 NULL DEFAULT 0,
    created_at timestamp(6) NULL,
    updated_at timestamp(6) NULL,
    deleted_at timestamp(6) NULL,
    CONSTRAINT modules_pkey PRIMARY KEY (id),
    CONSTRAINT modules_module_no_check CHECK ((module_no >= 1)),
    CONSTRAINT modules_word_count_check CHECK ((word_count >= 0))
);

-- Module progress table
CREATE TABLE IF NOT EXISTS spaced_learning.module_progress (
    id uuid NOT NULL,
    module_id uuid NOT NULL,
    user_id uuid NOT NULL,
    cycles_studied varchar(30) NULL DEFAULT 'FIRST_TIME',
    first_learning_date date NULL,
    next_study_date date NULL,
    percent_complete numeric(5, 2) NULL DEFAULT 0.00,
    created_at timestamp(6) NULL,
    updated_at timestamp(6) NULL,
    deleted_at timestamp(6) NULL,
    CONSTRAINT module_progress_pkey PRIMARY KEY (id),
    CONSTRAINT module_progress_cycles_studied_check CHECK (((cycles_studied)::text = ANY ((ARRAY['FIRST_TIME'::character varying, 'FIRST_REVIEW'::character varying, 'SECOND_REVIEW'::character varying, 'THIRD_REVIEW'::character varying, 'MORE_THAN_THREE_REVIEWS'::character varying])::text[])))
);

-- Repetitions table
CREATE TABLE IF NOT EXISTS spaced_learning.repetitions (
    id uuid NOT NULL,
    module_progress_id uuid NOT NULL,
    repetition_order varchar(20) NOT NULL,
    status varchar(50) NULL DEFAULT 'NOT_STARTED',
    review_date date NULL,
    created_at timestamp(6) NULL,
    updated_at timestamp(6) NULL,
    deleted_at timestamp(6) NULL,
    CONSTRAINT repetitions_pkey PRIMARY KEY (id),
    CONSTRAINT repetitions_repetition_order_check CHECK (((repetition_order)::text = ANY ((ARRAY['FIRST_REPETITION'::character varying, 'SECOND_REPETITION'::character varying, 'THIRD_REPETITION'::character varying, 'FOURTH_REPETITION'::character varying, 'FIFTH_REPETITION'::character varying])::text[]))),
    CONSTRAINT repetitions_status_check CHECK (((status)::text = ANY ((ARRAY['NOT_STARTED'::character varying, 'COMPLETED'::character varying, 'SKIPPED'::character varying])::text[])))
);

-- User Statistics table
CREATE TABLE IF NOT EXISTS spaced_learning.user_statistics (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    streak_days int4 NULL DEFAULT 0,
    streak_weeks int4 NULL DEFAULT 0,
    longest_streak_days int4 NULL DEFAULT 0,
    total_completed_modules int4 NULL DEFAULT 0,
    total_in_progress_modules int4 NULL DEFAULT 0,
    total_words int4 NULL DEFAULT 0,
    learned_words int4 NULL DEFAULT 0,
    vocabulary_completion_rate numeric(5, 2) NULL DEFAULT 0.00,
    weekly_new_words_rate numeric(5, 2) NULL DEFAULT 0.00,
    last_statistics_update timestamp(6) NULL,
    created_at timestamp(6) NULL,
    updated_at timestamp(6) NULL,
    deleted_at timestamp(6) NULL,
    CONSTRAINT user_statistics_pkey PRIMARY KEY (id)
);

-- Add foreign key constraints
ALTER TABLE spaced_learning.modules
ADD CONSTRAINT fkh6s7r2n5vtsmg4xjhao3818t
FOREIGN KEY (book_id) REFERENCES spaced_learning.books(id);

ALTER TABLE spaced_learning.user_roles
ADD CONSTRAINT fkh8ciramu9cc9q3qcqiv4ue8a6
FOREIGN KEY (role_id) REFERENCES spaced_learning.roles(id);

ALTER TABLE spaced_learning.user_roles
ADD CONSTRAINT fkhfh9dx7w3ubf1co1vdev94g3f
FOREIGN KEY (user_id) REFERENCES spaced_learning.users(id);

ALTER TABLE spaced_learning.module_progress
ADD CONSTRAINT fkiiw4sskvnx9ym1nixq197p0fo
FOREIGN KEY (user_id) REFERENCES spaced_learning.users(id);

ALTER TABLE spaced_learning.module_progress
ADD CONSTRAINT fkiwivm59wd0328gij7gayrr37
FOREIGN KEY (module_id) REFERENCES spaced_learning.modules(id);

ALTER TABLE spaced_learning.repetitions
ADD CONSTRAINT fk9lj2refs205nnsscajx9tywsk
FOREIGN KEY (module_progress_id) REFERENCES spaced_learning.module_progress(id);

ALTER TABLE spaced_learning.user_statistics
ADD CONSTRAINT fk_user_statistics_user
FOREIGN KEY (user_id) REFERENCES spaced_learning.users(id);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_modules_book_id ON spaced_learning.modules(book_id);
CREATE INDEX IF NOT EXISTS idx_module_progress_user_id ON spaced_learning.module_progress(user_id);
CREATE INDEX IF NOT EXISTS idx_module_progress_module_id ON spaced_learning.module_progress(module_id);
CREATE INDEX IF NOT EXISTS idx_repetitions_module_progress_id ON spaced_learning.repetitions(module_progress_id);
CREATE INDEX IF NOT EXISTS idx_repetitions_status ON spaced_learning.repetitions(status);
CREATE INDEX IF NOT EXISTS idx_repetitions_review_date ON spaced_learning.repetitions(review_date);
CREATE INDEX IF NOT EXISTS idx_users_username ON spaced_learning.users(username);
CREATE INDEX IF NOT EXISTS idx_users_email ON spaced_learning.users(email);
CREATE INDEX IF NOT EXISTS idx_users_status ON spaced_learning.users(status);
CREATE INDEX IF NOT EXISTS idx_user_statistics_user_id ON spaced_learning.user_statistics(user_id);
CREATE INDEX IF NOT EXISTS idx_books_status ON spaced_learning.books(status);
CREATE INDEX IF NOT EXISTS idx_books_category ON spaced_learning.books(category);
CREATE INDEX IF NOT EXISTS idx_books_difficulty_level ON spaced_learning.books(difficulty_level);
